<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.2.xsd"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context">
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>
    <!-- dataSource -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="10"/>
        <property name="maxActive" value="200"/>
        <property name="minIdle" value="10"/>
        <property name="maxIdle" value="20"/>
        <property name="maxWait" value="60000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        <property name="removeAbandoned" value="true"/>
        <property name="removeAbandonedTimeout" value="180"/>
        <property name="logAbandoned" value="true"/>
    </bean>
    <!-- sessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.autoReconnect">true</prop>
                <prop key="hibernate.query.factory_class">${hibernate.query.factory_class}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
                <prop key="Hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.x.y.**.domain</value>
            </list>
        </property>
    </bean>
    <!-- transaction -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.x.y.service.*Service.*(..))"/>
    </aop:config>
    <tx:annotation-driven proxy-target-class="true"/>
    <!-- @Controller -->
    <context:component-scan base-package="com.x.y">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <context:annotation-config/>
    <aop:aspectj-autoproxy/>
    <bean id="hibernateDataDAO" class="com.x.y.common.HibernateDataDAOImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- quartz -->
    <bean id="dataSourceForQuartz" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="filters" value="stat"/>
        <property name="maxActive" value="600"/>
        <property name="initialSize" value="30"/>
        <property name="maxWait" value="60000"/>
        <property name="minIdle" value="20"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="removeAbandoned" value="true"/>
        <property name="removeAbandonedTimeout" value="180"/>
        <property name="logAbandoned" value="true"/>
        <property name="connectionProperties" value="druid.stat.slowSqlMillis=3000"/>
    </bean>
    <bean id="schedulerFactoryBeans" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" autowire="no">
        <property name="dataSource" ref="dataSourceForQuartz"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="startupDelay" value="120"/>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.jobStore.class">
                    org.quartz.impl.jdbcjobstore.JobStoreTX
                </prop>
            </props>
        </property>
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
    </bean>
    <!-- ThreadPool -->
    <bean id="threadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="8"/>
        <property name="maxPoolSize" value="16"/>
        <property name="queueCapacity" value="200"/>
        <property name="keepAliveSeconds" value="300"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>
</beans>